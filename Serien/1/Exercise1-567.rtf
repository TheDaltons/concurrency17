{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\pardirnatural\partightenfactor0

\f0\fs20 \cf0 5. Why do we need synchronization mechanisms in concurrent programs?\
\
Synchronisation is used to prevent problems of concurrent programming as e.g. :\
Ensure safety:\
Multiple threads may try to access critical data at the same time. Therefore the operating system must ensure that only one thread can access said critical data at a time and thus blocking the other threads from accessing until the first thread is no longer needs access. Then the data becomes available to other threads again.\
\
Ensure liveness/fairness:\
Synchronization mechanisms should ensure liveness and fairness. Which means there shouldn\'92t be any deadlocks or starvation of threads. And thus ensures that every thread will make progress eventually.\
\
\
6. How do monitors differ from semaphores? Please provide a precise answer.\
\
Unlike semaphores monitors encapsulate data structures that are only accessible through the monitor\'92s procedures. Monitors are a programming language construct (not available in any language). With monitors mutual exclusive access to data is ensured by the compiler or language run-time. Unlike counting semaphores only one process may be executing a monitor procedure at a time.\
\
7. How are monitors and message passing similar? And how are they different?\
\
Ada tasks will accept messages from unknown senders much like monitors do.\
Monitores require shared memory while message passing does not.}